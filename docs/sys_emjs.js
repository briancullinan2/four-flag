

var LibrarySysCommon = {
  $SYSC: {},
  Sys_time: Com_RealTime,
  Sys_ListFiles: Sys_ListFiles,
  Sys_FTell: Sys_FTell,
  Sys_FSeek: Sys_FSeek,
  Sys_FClose: Sys_FClose,
  Sys_FWrite: Sys_FWrite,
  Sys_FFlush: Sys_FFlush,
  Sys_FRead: Sys_FRead,
  Sys_FOpen: Sys_FOpen,
  Sys_Remove: Sys_Remove,
  Sys_Rename: Sys_Rename,
  Sys_GetFileStats: Sys_GetFileStats,
  Sys_Mkdir: Sys_Mkdir,
  Sys_Mkdirp: Sys_Mkdirp,
	Sys_FOpen: Sys_FOpen,
	Sys_Mkdir: Sys_Mkdir,
	Sys_fgets: Sys_fgets,
	Sys_fputs: Sys_fputs,
	Sys_vfprintf: Sys_fprintf,
	Sys_fprintf: Sys_fprintf,
	Sys_fputc: Sys_fputc,
	Sys_putc: Sys_fputc,
	Sys_getc: Sys_fgetc,
	Sys_fgetc: Sys_fgetc,
	Sys_feof: Sys_feof,
	Sys_access: Sys_access,
	Sys_umask: function () {},
  Sys_longjmp: Sys_longjmp,
  Sys_setjmp: Sys_setjmp,
  Sys_fork: Sys_fork,
  Sys_wait: Sys_wait,
  Sys_exec: Sys_exec,
  Sys_execv: Sys_exec,
	DebugBreak: function () { debugger },
	DebugTrace: function () { console.log(new Error()) },
	Sys_RandomBytes: Sys_RandomBytes,
	Sys_Exit: Sys_Exit,
	Sys_Edit: Sys_Edit,
	Sys_Return: Sys_Return,
	exit: Sys_Exit,
	Sys_Frame: Sys_Frame,
	Sys_Error: Sys_Error,
	Sys_UnloadLibrary: Sys_UnloadLibrary,
	Sys_LoadLibrary: Sys_LoadLibrary,
	Sys_LoadFunction: Sys_LoadFunction,
	popen: function popen() {},
	Sys_Print: Sys_Print,
	Sys_SetStatus: Sys_SetStatus,
	CL_MenuModified: CL_MenuModified,
	CreateAndCall: CreateAndCall,
	CL_Try_Fail_LoadJPG: CL_Try_Fail_LoadJPG,
  NET_AdrToString: NET_AdrToString,
  Sys_Offline: Sys_Offline,
  Sys_SockaddrToString: Sys_SockaddrToString,
  Sys_StringToSockaddr: Sys_StringToSockaddr,
  NET_Sleep: NET_Sleep,
  NET_OpenIP: NET_OpenIP,
  Sys_StringToAdr: Sys_StringToAdr,
  Sys_SendPacket: Sys_SendPacket,
  Sys_IsLANAddress: Sys_IsLANAddress,
  Sys_NET_MulticastLocal: Sys_NET_MulticastLocal,
  CL_Download: CL_Download,
  Com_DL_Cleanup: Com_DL_Cleanup,
  CL_cURL_BeginDownload: CL_cURL_BeginDownload,
  mktime: mktime,
  asctime: asctime,
  time: function () {
    // The pointer returned by localtime (and some other functions) are actually pointers to statically allocated memory.
    // perfect.
    debugger
  },
  localtime: localtime,
  ctime: ctime,
  Com_RealTime: Com_RealTime,
  // locale time is really complicated
  //   use simple Q3 time structure
  Sys_time: Com_RealTime,
  Sys_Milliseconds: Sys_Milliseconds,
  Sys_MilliSeconds: Sys_Milliseconds,
  Sys_Microseconds: Sys_Microseconds,
  Sys_gettime: clock_gettime,
  clock_time_get: clock_gettime,
  clock_res_get: function () { debugger },
  __secs_to_zone: function () { return 0 },
  SNDDMA_Init: SNDDMA_Init,
  SNDDMA_Shutdown: SNDDMA_Shutdown,
  SNDDMA_BeginPainting: function () {},
  SNDDMA_Submit: function () {},
  SNDDMA_GetDMAPos: function () {
    return Sys_Milliseconds()
  },

  S_CodecCloseStream: function () {},
  S_CodecOpenStream: function () {},
  S_CodecReadStream: function () {},
  S_CodecLoad: S_CodecLoad,
  S_LoadSound: S_CodecLoad,
  S_CodecInit: function () {},
  S_CodecShutdown: function () {},
  S_Base_StartSound: S_Base_StartSound,
  S_Base_StartLocalSound: S_Base_StartLocalSound,
  S_Base_AddLoopingSound: S_Base_AddLoopingSound,
  S_Base_AddRealLoopingSound: S_Base_AddLoopingSound,
  S_Base_StopLoopingSound: S_Base_StopLoopingSound,
  
  S_Base_ClearLoopingSounds: S_Base_ClearLoopingSounds,
  S_Base_ClearSoundBuffer: S_Base_ClearLoopingSounds,
  S_Base_StopAllSounds: S_Base_ClearLoopingSounds,

  S_Base_StopBackgroundTrack: S_Base_StopBackgroundTrack,
  S_RawSamples: S_RawSamples,
  S_Base_Respatialize: S_Base_Respatialize,
  S_Base_UpdateEntityPosition: S_Base_UpdateEntityPosition,
  S_Base_Update: S_Base_Update,
  S_Base_RawSamples: S_Base_RawSamples,
  S_Base_StartBackgroundTrack: S_Base_StartBackgroundTrack,
  
  GL_GetDrawableSize: GL_GetDrawableSize,
  GL_GetProcAddress: function () { },

  IN_Init: IN_Init,
  GLimp_Shutdown: GLimp_Shutdown,
  GLimp_StartDriverAndSetMode: GLimp_StartDriverAndSetMode,

  glBindBufferARB: function () { },
  glBlitFramebuffer: function () { },
  glBufferDataARB: function () { },
  glDeleteBuffersARB: function () { },
  glGenBuffersARB: function () { },
  glGetInternalformativ: function () { },
  glRenderbufferStorageMultisample: function () { },


  glGenQueries: function () { },
  glDeleteQueries: function () { },
  glBeginQuery: function () { },
  glEndQuery: function () { },
  glGetQueryObjectiv: function () { },
  glGetQueryObjectuiv: function () { },
  glTextureParameterfEXT: function () { },
  glBindMultiTextureEXT: function () { },
  glTextureParameteriEXT: function () { },
  glTextureImage2DEXT: function () { },
  glTextureSubImage2DEXT: function () { },
  glCopyTextureSubImage2DEXT: function () { },
  glCompressedTextureImage2DEXT: function () { },
  glCompressedTextureSubImage2DEXT: function () { },
  glGenerateTextureMipmapEXT: function () { },
  glProgramUniform1iEXT: function () { },
  glProgramUniform1fEXT: function () { },
  glProgramUniform2fEXT: function () { },
  glProgramUniform3fEXT: function () { },
  glProgramUniform4fEXT: function () { },
  glProgramUniform1fvEXT: function () { },
  glProgramUniformMatrix4fvEXT: function () { },
  glNamedRenderbufferStorageEXT: function () { },
  glNamedRenderbufferStorageMultisampleEXT: function () { },
  glCheckNamedFramebufferStatusEXT: function () { },
  glNamedFramebufferRenderbufferEXT: function () { },
  glNamedFramebufferTexture2DEXT: function () { },


  glBindBufferARB: function () { },
  glBlitFramebuffer: function () { },
  glBufferDataARB: function () { },
  glDeleteBuffersARB: function () { },
  glGenBuffersARB: function () { },
  glGetInternalformativ: function () { },
  glRenderbufferStorageMultisample: function () { },



  glAlphaFunc: function _glAlphaFunc() { debugger },
  glArrayElement: function _glArrayElement() { debugger },
  glClipPlane: function _glClipPlane() { debugger },
  glColor3f: function _glColor3f() { debugger },
  glColor4f: function _glColor4f() { debugger },
  glColor4ubv: function _glColor4ubv() { debugger },
  glColor3f: function _glColor3f() { debugger },
  glColor4f: function _glColor4f() { debugger },
  glColor4ubv: function _glColor4ubv() { debugger },
  glColorPointer: function _glColorPointer() { debugger },
  glTexCoord2f: function _glTexCoord2f() { debugger },
  glTexCoord2fv: function _glTexCoord2fv() { debugger },
  glTexCoordPointer: function _glTexCoordPointer() { debugger },
  glTexEnvf: function _glTexEnvf() { debugger },
  glLoadMatrixf: function _glLoadMatrixf() { debugger },
  glMapBufferRange: function _glMapBufferRange() { debugger },
  glOrtho: function _glOrtho() { debugger },
  glPolygonMode: function _glPolygonMode() { },
  glPopMatrix: function _glPopMatrix() { debugger },
  glPushMatrix: function _glPushMatrix() { debugger },
  glDisableClientState: function _glDisableClientState() { debugger },
  glShadeModel: function _glShadeModel() { debugger },
  glTranslatef: function _glTranslatef() { debugger },
  glVertex2f: function _glVertex2f() { debugger },
  glVertex3f: function _glVertex3f() { debugger },
  glVertex3fv: function _glVertex3fv() { debugger },
  glEnableClientState: function _glEnableClientState() { debugger; },
  glEnd: function _glEnd() { debugger; },
  glFrustum: function _glFrustum() { debugger; },
  glDrawBuffer: function _glDrawBuffer(buf) {
    GLctx["drawBuffers"]([buf]);
  },
  
  R_LoadRemote: R_LoadRemote,
};

autoAddDeps(LibrarySysCommon, '$SYSC');
mergeInto(LibraryManager.library, LibrarySysCommon);